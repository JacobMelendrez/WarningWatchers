let express,exphbs,bcrypt,sqlite3,open,cookieParser,grantAuthToken,searchUserFromAuthToken;_a40‍.x([["dbPromise",()=>dbPromise]]);_a40‍.w("express",[["default",["express"],function(v){express=v}]]);_a40‍.w("express-handlebars",[["default",["exphbs"],function(v){exphbs=v}]]);_a40‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_a40‍.w("sqlite3",[["default",["sqlite3"],function(v){sqlite3=v}]]);_a40‍.w("sqlite",[["open",["open"],function(v){open=v}]]);_a40‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_a40‍.w("./auth",[["grantAuthToken",["grantAuthToken"],function(v){grantAuthToken=v}],["searchUserFromAuthToken",["searchUserFromAuthToken"],function(v){searchUserFromAuthToken=v}]]);/* 
Author: Unique Ratliff
Date: 11/26/2020
Description: An interactive message board that allows for user
    account functionality
 */









//Load database file upon first running the code
       const dbPromise = _a40‍.a("open",open)({
    filename: "data.db",
    driver: _a40‍.a("sqlite3",sqlite3).Database,
});;_a40‍.j(["dbPromise"]);

const app = _a40‍.a("express",express)();

app.engine("handlebars", _a40‍.a("exphbs",exphbs)());
app.set("view engine", "handlebars");

//Middleware functions
app.use(_a40‍.a("cookieParser",cookieParser)());
app.use(_a40‍.a("express",express).urlencoded({ extended: false }));
app.use('/static', _a40‍.a("express",express).static(__dirname + '/static'));
app.use(async (req, res, next) => {
    const { authToken } = req.cookies;
    if(!authToken) {
        //Need to make sure it returns out of it and call next so it moves on
        return next();
    }

    try {
    const user = await _a40‍.a("searchUserFromAuthToken",searchUserFromAuthToken)(authToken);
    req.user = user;
    } 
    catch (e){
        next(e);
    }
    next();
});

//Invoked everytime someone hits webpage
//Read messages from database
app.get("/", async (req, res) => {
    const db = await dbPromise;
    //Select every message and matches them to a user record
    //then selects from the combine record the id, content, and username from each record
    const messages = await db.all(`SELECT
        Messages.id,
        Messages.content,
        Users.username as authorName
    FROM Messages LEFT JOIN Users WHERE Messages.authorId = Users.id`);
    res.render("home", { messages: messages, user: req.user });
});

app.get("/about", (req, res) => {

    return res.render('/about');
   
});

app.get("/register", (req, res) => {
    if(req.user) {
        return res.redirect('/');
    }
    res.render('register');
});

app.get("/login", (req, res) => {
    if(req.user) {
        return res.redirect('/');
    }
    res.render('login');
});

app.get("/logout", (req, res) => {
    if(req.user && req.cookies.authToken) {
        res.clearCookie('authToken');
        res.redirect('/');
    }
    else{
    res.redirect('/login');
    }
});

app.post("/register", async (req, res) => {
    const db = await dbPromise;
    const username = req.body.username;
    const email = req.body.email;
    const password = req.body.password;
    const passwordHash = await _a40‍.a("bcrypt",bcrypt).hash(password, 10);
    try{
        await db.run('INSERT INTO Users (username, email, password) VALUES (?, ?, ?);',
        username,
        email,
        passwordHash
        )
        const user = await db.get('SELECT id FROM Users WHERE email=?', email);
        const token = await _a40‍.a("grantAuthToken",grantAuthToken)(user.id);
        res.cookie('authToken', token);
        res.redirect('/');
    }
    catch (e) {
        return res.render('register', {error: e})
    }
});

app.post("/login", async (req, res) => {
    const db = await dbPromise;
    const email = req.body.email;
    const password = req.body.password;

    try{
       const existingUser = await db.get("SELECT * FROM Users WHERE email=?", email);
       if (!existingUser) {
           throw 'Incorrect login';
       }
       //compare passwords
       const passwordMatch = await _a40‍.a("bcrypt",bcrypt).compare(password, existingUser.password);
       if (!passwordMatch) {
           throw 'Incorrect login';
       }
       const token = await _a40‍.a("grantAuthToken",grantAuthToken)(existingUser.id);
       res.cookie('authToken', token);
       res.redirect('/');
    }
    catch (e) {
        return res.render('login', {error: e})
    }
});

//Writes messages to database
app.post("/message", async (req, res) => {
    if (!req.user){
        res.status(401);
        return res.send('must be loggin in to post messages')
    }
    const db = await dbPromise;
    await db.run('INSERT INTO Messages (content, authorId) VALUES (?, ?);', 
    req.body.message, req.user.id);

    res.redirect('/');
});

//Gets access to database and runs migration
const setup = async () => {
    const db = await dbPromise;
    await db.migrate();
    
    app.listen(8000, () => {
        console.log("Listening on port 8080 @ http://localhost:8000");
    });
};

setup();